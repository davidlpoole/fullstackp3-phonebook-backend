{"version":3,"sources":["services/people.js","components/InputField.js","components/Form.js","components/Entries.js","components/Heading.js","App.js","index.js"],"names":["baseUrl","peopleService","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","remove","delete","InputField","htmlFor","label","type","value","onChange","className","Form","onSubmit","newName","handleNameChange","newNumber","handleNumberChange","Entry","person","onDelete","name","number","onClick","Entries","people","map","Heading","text","App","useState","setPeople","setNewName","setNewNumber","newFilter","setNewFilter","notification","setNotification","notificationType","setNotificationType","useEffect","initialPeople","peopleToShow","filter","toLowerCase","includes","displayNotification","message","setTimeout","Notification","style","color","event","preventDefault","personObject","returnedPerson","concat","window","confirm","find","p","changedPerson","catch","error","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dadb3c99.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/people/'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nconst peopleService = {\n    getAll, create, update, remove\n}\n\nexport default peopleService","import React from 'react';\n\n\nexport const InputField = ({ htmlFor, label, type, value, onChange }) => {\n  return (\n    <div className='input'>\n      <label htmlFor={htmlFor}>\n        {label}\n      </label>\n      <input\n        type={type}\n        id={htmlFor}\n        value={value}\n        onChange={onChange} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { InputField } from \"./InputField\";\n\nexport const Form = ({ onSubmit, newName, handleNameChange, newNumber, handleNumberChange }) => {\n  return (\n    <form onSubmit={onSubmit}>\n\n      <InputField\n        htmlFor='name'\n        label='Name: '\n        type='text'\n        value={newName}\n        onChange={handleNameChange} />\n\n      <InputField\n        htmlFor='number'\n        label='Number: '\n        type='text'\n        value={newNumber}\n        onChange={handleNumberChange} />\n\n      <button className='add' type=\"submit\">Add</button>\n    </form>\n  );\n};\n","import React from 'react';\n\nconst Entry = ({ person, onDelete }) => {\n  return (\n    <li key={person.id}>{person.name} {person.number}\n      <button className='delete' onClick={() => onDelete(person.id)}>Delete</button>\n    </li>\n  )\n}\n\nexport const Entries = ({ people, onDelete }) => {\n  return (\n    <ul>\n      {people.map(person =>\n        <Entry key={person.id} person={person} onDelete={onDelete} />\n      )}\n    </ul>\n  );\n};","import React from 'react';\n\nexport const Heading = ({ text }) => {\n    return (\n        <h2>\n            {text}\n        </h2>\n    );\n};","import React, { useState, useEffect } from 'react'\nimport peopleService from './services/people'\n\nimport './index.css'\nimport { Form } from './components/Form'\nimport { InputField } from './components/InputField'\nimport { Entries } from './components/Entries'\nimport { Heading } from './components/Heading'\n\n\n\nconst App = () => {\n\n  // initialise states\n  const [people, setPeople] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilter, setNewFilter] = useState('')\n  const [notification, setNotification] = useState(null)\n  const [notificationType, setNotificationType] = useState('neutral')\n\n  // GET all records on first load\n  useEffect(() => {\n    peopleService\n      .getAll()\n      .then(initialPeople => {\n        setPeople(initialPeople)\n      })\n  }, [])\n\n\n  // Event Handlers\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n\n  // CREATE NEW\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    // If person does not already exist\n    if (people.map(person => person.name).includes(newName) === false) {\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      peopleService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPeople(people.concat(returnedPerson))\n          displayNotification(`Added ${returnedPerson.name}`, 'good')\n          setNewName('')\n          setNewNumber('')\n        })\n    } else { // if person exists then UPDATE\n      if (!window.confirm(`${newName} is already in the phonebook, overwrite number?`)) return;\n      let person = people.find(p => p.name === newName)\n      const changedPerson = { ...person, number: newNumber }\n\n      peopleService\n        .update(person.id, changedPerson)\n        .then(returnedPerson => {\n          setPeople(\n            people.map(person =>\n              person.id !== returnedPerson.id ? person : returnedPerson))\n          displayNotification(`Updated '${person.name}' succesfully`, 'good')\n          setNewName('')\n          setNewNumber('')\n        })\n        .catch(error => {\n          displayNotification(`The person '${person.name}' was already deleted on the server`, 'bad')\n          setPeople(people.filter(p => p.id !== person.id))\n        })\n    }\n  }\n\n  // DELETE\n  const deletePerson = id => {\n    let person = people.find(p => p.id === id)\n    if (!window.confirm(`Are you sure you want to delete '${person.name}'?`)) return;\n    peopleService\n      .remove(id)\n      .then(() => {\n        displayNotification(`Deleted '${person.name}' succesfully`, 'good')\n        setPeople(people.filter(p => p.id !== id))\n      })\n      .catch(error => {\n        displayNotification(`The person '${person.name}' was already deleted on the server`, 'bad')\n        setPeople(people.filter(p => p.id !== person.id))\n      })\n  }\n\n  // FILTER\n  const peopleToShow = people.filter(person =>\n    person.name.toLowerCase().includes(\n      newFilter.toLowerCase()\n    ))\n\n\n  // Display NOTIFICATION with timeout\n  const displayNotification = (message, type) => {\n    setNotificationType(type)\n    setNotification(message)\n    setTimeout(() => {\n      setNotification(null)\n      setNotificationType('neutral')\n    }, 5000)\n  }\n  // Set notification message and style (good/bad/neutral)\n  const Notification = ({ message, type }) => {\n    const colors = {\n      'neutral': 'black',\n      'good': 'green',\n      'bad': 'red',\n    }\n    if (message === null) {\n      return null\n    }\n    return (\n      <div className=\"notification\" style={{ color: colors[type] }}>\n        {notification}\n      </div>\n    )\n  }\n\n  return (\n    <div>\n\n      <h1>Phonebook</h1>\n\n      <Heading text='Add new' />\n\n      <Notification message={notification} type={notificationType} />\n\n      <Form\n        onSubmit={addPerson}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n\n      <Heading text='Entries' />\n\n      <InputField\n        htmlFor='filter'\n        label='Filter by Name: '\n        type='text'\n        value={newFilter}\n        onChange={handleFilterChange}\n      />\n\n      <Entries people={peopleToShow} onDelete={deletePerson} />\n\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}